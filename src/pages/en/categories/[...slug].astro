---
import Layout from '@layouts/Layout.astro';
import TwoColumnLayout from '@layouts/TwoColumnLayout.astro';
import HomeSider from '@components/layout/HomeSider.astro';
import Cover from '@components/ui/cover/Cover.astro';
import { HomeSiderType } from '@constants/enum';
import { getCategoryList, getCategoryByLink, getSortedPosts } from '@lib/content';
import { getTranslations } from '@i18n/index';
import { getPostTranslation } from '@lib/article-i18n';
import type { SupportedLanguage } from '@types/i18n';

// 当前语言
const currentLanguage: SupportedLanguage = 'en';
const translations = getTranslations(currentLanguage);

// 定义分类翻译映射
const categoryTranslations: Record<string, string> = {
  // 主分类
  加密实验室: translations.featuredCategories?.cryptoLab || 'Crypto Lab',
  期权研究院: translations.featuredCategories?.optionsInstitute || 'Options Institute',
  现金流乌托邦: translations.featuredCategories?.cashflowUtopia || 'Cashflow Utopia',

  // 子分类
  网格策略: translations.featuredCategories?.gridStrategy || 'Grid Strategy',
  合约交易: translations.featuredCategories?.futuresTrading || 'Futures Trading',
  加密风向标: translations.featuredCategories?.cryptoNews || 'Crypto News',
  期权课程: translations.featuredCategories?.optionsCourse || 'Options Course',
  策略分析: translations.featuredCategories?.strategyAnalysis || 'Strategy Analysis',
  实盘分享: translations.featuredCategories?.tradingJournal || 'Trading Journal',
  期权卖方策略: translations.featuredCategories?.optionSelling || 'Option Selling',
  全球高息股轮动: translations.featuredCategories?.dividendStocks || 'Dividend Stocks',
  税务优化: translations.featuredCategories?.taxOptimization || 'Tax Optimization',
};

export async function getStaticPaths() {
  const { categories } = await getCategoryList();
  const allPosts = await getSortedPosts();
  const paths = [];

  // 获取所有文章的分类信息，生成分类路径
  const categoryLinks = new Set();

  allPosts.forEach((post) => {
    const postCategories = post.data.categories;
    if (postCategories && postCategories.length > 0) {
      // 处理嵌套分类数组
      if (Array.isArray(postCategories[0])) {
        // 嵌套分类：['期权研究院', '期权课程']
        const firstCategory = postCategories[0][0]; // 一级分类
        const secondCategory = postCategories[0][1]; // 二级分类

        if (firstCategory) {
          // 一级分类路径
          const firstSlug = firstCategory.toLowerCase().replace(/\s+/g, '-');
          categoryLinks.add(firstSlug);

          // 二级分类路径（如果存在）
          if (secondCategory) {
            const secondSlug = secondCategory.toLowerCase().replace(/\s+/g, '-');
            categoryLinks.add(secondSlug);
            // 添加嵌套路径：父分类/子分类
            const nestedPath = `${firstSlug}/${secondSlug}`;
            categoryLinks.add(nestedPath);
          }
        }
      } else {
        // 单级分类
        const categorySlug = postCategories[0].toLowerCase().replace(/\s+/g, '-');
        categoryLinks.add(categorySlug);
      }
    }
  });

  // 根据_config.yml中的分类映射生成路径
  const categoryMap = {
    期权研究院: 'options',
    期权课程: 'course',
    策略分析: 'strategy',
    实盘分享: 'trading-journal',
    加密实验室: 'crypto',
    网格策略: 'grid',
    合约交易: 'futures',
    加密风向标: 'crypto-news',
    现金流乌托邦: 'cashflow-utopia',
    期权卖方策略: 'option-selling',
    全球高息股轮动: 'drip',
    税务优化: 'tax',
  };

  // 生成正确的嵌套分类路径
  allPosts.forEach((post) => {
    const postCategories = post.data.categories;
    if (postCategories && Array.isArray(postCategories[0]) && postCategories[0].length >= 2) {
      const parentCategory = postCategories[0][0];
      const childCategory = postCategories[0][1];

      const parentSlug = categoryMap[parentCategory];
      const childSlug = categoryMap[childCategory];

      if (parentSlug && childSlug) {
        // 添加嵌套路径：options/course
        categoryLinks.add(`${parentSlug}/${childSlug}`);
      }
    }
  });

  // 添加更全面的分类别名路径
  const categoryAliases = {
    // 主分类
    crypto: '加密实验室',
    options: '期权研究院',
    'cashflow-utopia': '现金流乌托邦',

    // 子分类
    grid: '网格策略',
    futures: '合约交易',
    'crypto-news': '加密风向标',
    course: '期权课程',
    strategy: '策略分析',
    'trading-journal': '实盘分享',
    'option-selling': '期权卖方策略',
    drip: '全球高息股轮动',
    tax: '税务优化',

    // 嵌套分类路径
    'options/course': ['期权研究院', '期权课程'],
    'options/strategy': ['期权研究院', '策略分析'],
    'options/trading-journal': ['期权研究院', '实盘分享'],
    'crypto/grid': ['加密实验室', '网格策略'],
    'crypto/futures': ['加密实验室', '合约交易'],
    'crypto/crypto-news': ['加密实验室', '加密风向标'],
    'cashflow-utopia/option-selling': ['现金流乌托邦', '期权卖方策略'],
    'cashflow-utopia/drip': ['现金流乌托邦', '全球高息股轮动'],
    'cashflow-utopia/tax': ['现金流乌托邦', '税务优化'],

    // 英语别名
    'options-institute': '期权研究院',
    'crypto-lab': '加密实验室',
    'grid-strategy': '网格策略',
    'futures-trading': '合约交易',
    'options-course': '期权课程',
    'strategy-analysis': '策略分析',
    'option-selling-strategies': '期权卖方策略',
    'dividend-stocks': '全球高息股轮动',
    'tax-optimization': '税务优化',
  };

  // 为每个分类创建路径
  for (const link of categoryLinks) {
    paths.push({
      params: { slug: link },
      props: { categoryLink: link, isIndex: false },
    });
  }

  // 添加别名路径
  for (const [alias, chineseName] of Object.entries(categoryAliases)) {
    paths.push({
      params: { slug: alias },
      props: { categoryLink: alias, isIndex: false, categoryAlias: chineseName },
    });
  }

  return paths;
}

const { categories, categoryLink, isIndex, categoryAlias } = Astro.props;

let pageTitle = translations.category.allCategories;
let posts = [];
let displayCategoryName = '';

if (!isIndex && categoryLink) {
  const allPosts = await getSortedPosts();

  // 定义分类别名映射
  const categoryAliases = {
    // 主分类
    crypto: '加密实验室',
    options: '期权研究院',
    'cashflow-utopia': '现金流乌托邦',

    // 子分类
    grid: '网格策略',
    futures: '合约交易',
    'crypto-news': '加密风向标',
    course: '期权课程',
    strategy: '策略分析',
    'trading-journal': '实盘分享',
    'option-selling': '期权卖方策略',
    drip: '全球高息股轮动',
    tax: '税务优化',

    // 嵌套分类路径 - 返回数组形式以匹配嵌套结构
    'options/course': ['期权研究院', '期权课程'],
    'options/strategy': ['期权研究院', '策略分析'],
    'options/trading-journal': ['期权研究院', '实盘分享'],
    'crypto/grid': ['加密实验室', '网格策略'],
    'crypto/futures': ['加密实验室', '合约交易'],
    'crypto/crypto-news': ['加密实验室', '加密风向标'],
    'cashflow-utopia/option-selling': ['现金流乌托邦', '期权卖方策略'],
    'cashflow-utopia/drip': ['现金流乌托邦', '全球高息股轮动'],
    'cashflow-utopia/tax': ['现金流乌托邦', '税务优化'],

    // 英语别名
    'options-institute': '期权研究院',
    'crypto-lab': '加密实验室',
    'grid-strategy': '网格策略',
    'futures-trading': '合约交易',
    'options-course': '期权课程',
    'strategy-analysis': '策略分析',
    'option-selling-strategies': '期权卖方策略',
    'dividend-stocks': '全球高息股轮动',
    'tax-optimization': '税务优化',
  };

  posts = allPosts.filter((post) => {
    const postCategories = post.data.categories;
    if (!postCategories || !postCategories.length) return false;

    // 处理嵌套路径（如 options/course）
    if (categoryLink.includes('/')) {
      const targetCategoryArray = categoryAliases[categoryLink];
      if (targetCategoryArray && Array.isArray(targetCategoryArray)) {
        // 匹配嵌套分类
        if (Array.isArray(postCategories[0])) {
          return postCategories[0][0] === targetCategoryArray[0] && postCategories[0][1] === targetCategoryArray[1];
        }
      }
      return false;
    }

    // 改进的分类匹配逻辑
    if (Array.isArray(postCategories[0])) {
      // 嵌套分类：['加密实验室', '网格策略']
      const firstCategory = postCategories[0][0]; // 一级分类
      const secondCategory = postCategories[0][1]; // 二级分类

      // 检查是否匹配别名
      const targetCategory = categoryAliases[categoryLink] || categoryLink;

      // 匹配一级或二级分类
      return (
        firstCategory === targetCategory ||
        secondCategory === targetCategory ||
        firstCategory?.toLowerCase().replace(/\s+/g, '-') === categoryLink ||
        secondCategory?.toLowerCase().replace(/\s+/g, '-') === categoryLink
      );
    } else {
      // 单级分类
      const category = postCategories[0];
      const targetCategory = categoryAliases[categoryLink] || categoryLink;
      return category === targetCategory || category?.toLowerCase().replace(/\s+/g, '-') === categoryLink;
    }
  });

  // 获取显示用的分类名称（使用翻译后的名称）
  if (posts.length > 0) {
    const firstPost = posts[0];
    const postCategories = firstPost.data.categories;
    if (postCategories && postCategories.length > 0) {
      if (Array.isArray(postCategories[0])) {
        // 对于嵌套分类，优先显示二级分类，如果没有则显示一级
        if (categoryLink.includes('/')) {
          const targetCategoryArray = categoryAliases[categoryLink];
          if (targetCategoryArray && Array.isArray(targetCategoryArray)) {
            displayCategoryName = categoryTranslations[targetCategoryArray[1]] || targetCategoryArray[1]; // 显示翻译后的子分类
          }
        } else {
          const targetCategory = categoryAliases[categoryLink] || categoryLink;
          const secondCategory = postCategories[0][1];
          const firstCategory = postCategories[0][0];

          if (secondCategory === targetCategory || secondCategory?.toLowerCase().replace(/\s+/g, '-') === categoryLink) {
            displayCategoryName = categoryTranslations[secondCategory] || secondCategory;
          } else {
            displayCategoryName = categoryTranslations[firstCategory] || firstCategory;
          }
        }
      } else {
        const categoryName = postCategories[0];
        displayCategoryName = categoryTranslations[categoryName] || categoryName;
      }
    }
  } else {
    // 如果没有找到文章，使用别名或分类链接作为显示名称
    if (categoryLink.includes('/')) {
      const targetCategoryArray = categoryAliases[categoryLink];
      if (targetCategoryArray && Array.isArray(targetCategoryArray)) {
        displayCategoryName = categoryTranslations[targetCategoryArray[1]] || targetCategoryArray[1]; // 显示翻译后的子分类
      } else {
        displayCategoryName =
          categoryLink.split('/').pop()?.charAt(0).toUpperCase() + categoryLink.split('/').pop()?.slice(1).replace(/-/g, ' ') ||
          categoryLink;
      }
    } else {
      const categoryName =
        categoryAliases[categoryLink] || categoryLink.charAt(0).toUpperCase() + categoryLink.slice(1).replace(/-/g, ' ');
      displayCategoryName = categoryTranslations[categoryName] || categoryName;
    }
  }

  pageTitle = `${displayCategoryName} - ${translations.category.allCategories}`;
}

// 为每篇文章获取翻译信息
const postsWithTranslations = posts.map((post: any) => {
  const translation = getPostTranslation(post, currentLanguage);
  return {
    ...post,
    translatedTitle: translation.title,
    translatedDescription: translation.description,
    isTranslated: translation.isTranslated,
    fallbackToOriginal: translation.fallbackToOriginal,
  };
});
---

<Layout
  title={`${pageTitle} | ${translations.seo.defaultTitle}`}
  description={translations.seo.defaultDescription}
  siderType={HomeSiderType.CATEGORY}
  lang={currentLanguage}
>
  <TwoColumnLayout>
    <Cover slot="cover" />
    <HomeSider slot="sider" type={HomeSiderType.CATEGORY} />
    <div class="shadow-box bg-gradient-start flex flex-col gap-4 p-4 pt-6 md:px-5 md:py-4">
      <h1 class="text-2xl font-bold">{pageTitle}</h1>

      <div class="space-y-6">
        {
          postsWithTranslations.length > 0 ? (
            postsWithTranslations.map((post: any) => (
              <article class="border-b border-gray-200 pb-6 last:border-b-0 dark:border-gray-700">
                <h2 class="mb-2 text-xl font-semibold">
                  <a
                    href={`/en/article/${post.data?.link ?? post.slug.split('/').pop() ?? post.slug}`}
                    class="transition-colors hover:text-blue-600"
                  >
                    {post.translatedTitle}
                    {post.isTranslated && (
                      <span class="ml-1 text-xs text-green-600" title="Translated">
                        [T]
                      </span>
                    )}
                    {post.fallbackToOriginal && (
                      <span class="ml-1 text-xs text-orange-600" title="Original">
                        [O]
                      </span>
                    )}
                  </a>
                </h2>
                {(post.translatedDescription || post.data.description) && (
                  <p class="mb-3 text-gray-600 dark:text-gray-300">{post.translatedDescription || post.data.description}</p>
                )}
                <div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                  <span>
                    {translations.post.publishedOn}: {post.data.date.toLocaleDateString('en')}
                  </span>
                  {post.data.categories && post.data.categories.length > 0 && (
                    <span>
                      Category:{' '}
                      {Array.isArray(post.data.categories[0])
                        ? categoryTranslations[post.data.categories[0][1]] ||
                          categoryTranslations[post.data.categories[0][0]] ||
                          post.data.categories[0][0]
                        : categoryTranslations[post.data.categories[0]] || post.data.categories[0]}
                    </span>
                  )}
                </div>
              </article>
            ))
          ) : (
            <div class="py-12 text-center">
              <p class="text-lg text-gray-500 dark:text-gray-400">{translations.category.noPostsInCategory}</p>
              <p class="mt-2 text-sm text-gray-400 dark:text-gray-500">Category: {displayCategoryName}</p>
              <a href="/en/categories" class="mt-4 inline-block text-blue-600 transition-colors hover:text-blue-800">
                ← {translations.category.allCategories}
              </a>
            </div>
          )
        }
      </div>
    </div>
  </TwoColumnLayout>
</Layout>
