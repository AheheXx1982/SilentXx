---
import { routers } from '@constants/router';
import { cn } from '@lib/utils';
import { Icon } from 'astro-icon/components';
import { MenuIcon } from '@components/ui/MenuIcon';

const currentPath = Astro.url.pathname;
---

<!-- 遮罩层 -->
<div id="drawer-overlay" class="fixed inset-0 z-40 hidden bg-black/50" role="presentation" aria-hidden="true"></div>

<!-- 移动端抽屉导航 -->
<div
  id="mobile-drawer"
  class="bg-gradient-start fixed inset-y-0 left-0 z-50 h-screen w-64 -translate-x-full transform p-4 shadow-lg backdrop-blur-sm transition-transform duration-300"
  role="dialog"
  aria-label="导航菜单"
  aria-modal="true"
>
  <div class="flex h-full flex-col">
    <header class="flex items-center justify-center">
      <!-- <h2 class="text-lg font-semibold">菜单</h2> -->
      <button id="close-drawer" aria-label="关闭菜单" class="invisible">
        <Icon name="ri:close-line" class="h-6 w-6" />
      </button>
    </header>

    <nav class="mt-4 flex flex-col gap-4" role="navigation">
      {
        routers.map((item) =>
          item.children?.length ? (
            <div class="flex flex-col gap-2">
              <div class="flex items-center gap-2 text-lg font-medium" role="heading" aria-level={2}>
                {item.icon && <Icon name={item.icon} class="h-5 w-5" aria-hidden="true" />}
                {item.name}
              </div>
              <div class="ml-4 flex flex-col gap-2">
                {item.children.map((child) => (
                  <a
                    href={child.path ?? '#'}
                    class={cn('hover:bg-foreground/10 flex items-center gap-2 rounded-lg p-2 transition-colors', {
                      'bg-foreground/10': child.path === currentPath,
                    })}
                    aria-current={child.path === currentPath ? 'page' : undefined}
                  >
                    {child.icon && <Icon name={child.icon} class="h-5 w-5" aria-hidden="true" />}
                    {child.name}
                  </a>
                ))}
              </div>
            </div>
          ) : (
            <a
              href={item.path ?? '#'}
              class={cn('hover:bg-foreground/10 flex items-center gap-2 rounded-lg p-2 transition-colors', {
                'bg-foreground/10': item.path === currentPath,
              })}
              aria-current={item.path === currentPath ? 'page' : undefined}
            >
              {item.icon && <Icon name={item.icon} class="h-5 w-5" aria-hidden="true" />}
              {item.name}
            </a>
          ),
        )
      }
    </nav>
  </div>
</div>

<script>
  interface DrawerElements {
    drawer: HTMLElement | null;
    closeBtn: HTMLElement | null;
    overlay: HTMLElement | null;
  }

  const DRAWER_SELECTORS = {
    drawer: 'mobile-drawer',
    closeBtn: 'close-drawer',
    overlay: 'drawer-overlay',
  } as const;

  const DRAWER_CLASSES = {
    hidden: 'hidden',
    translateX: '-translate-x-full',
  } as const;

  const DRAWER_EVENTS = {
    toggle: 'toggleDrawer',
    stateChange: 'drawerStateChange',
  } as const;

  class DrawerController {
    private elements: DrawerElements;
    private isOpen = false;

    constructor() {
      this.elements = this.initElements();
      if (this.validateElements()) {
        this.bindEvents();
      }
    }

    private initElements(): DrawerElements {
      return Object.entries(DRAWER_SELECTORS).reduce(
        (acc, [key, id]) => ({
          ...acc,
          [key]: document.getElementById(id),
        }),
        {} as DrawerElements,
      );
    }

    private validateElements(): boolean {
      return Object.entries(this.elements).every(([key, element]) => {
        const exists = !!element;
        if (!exists) {
          console.error(`抽屉元素未找到: ${key}`);
        }
        return exists;
      });
    }

    private bindEvents(): void {
      document.addEventListener(DRAWER_EVENTS.toggle, this.handleToggle);
      document.addEventListener('keydown', this.handleKeyDown);

      this.elements.closeBtn?.addEventListener('click', this.close);
      this.elements.overlay?.addEventListener('click', this.close);
    }

    private handleToggle = (e: Event): void => {
      const { isOpen } = (e as CustomEvent<{ isOpen: boolean }>).detail;
      isOpen ? this.open() : this.close();
    };

    private handleKeyDown = (e: KeyboardEvent): void => {
      if (e.key === 'Escape' && this.isOpen) {
        this.close();
      }
    };

    private open = (): void => {
      const { drawer, overlay, closeBtn } = this.elements;
      if (!drawer || !overlay) return;

      this.isOpen = true;
      drawer.classList.remove(DRAWER_CLASSES.translateX);
      overlay.classList.remove(DRAWER_CLASSES.hidden);
      document.body.style.overflow = 'hidden';
      closeBtn?.focus();
    };

    private close = (): void => {
      const { drawer, overlay } = this.elements;
      if (!drawer || !overlay) return;

      this.isOpen = false;
      drawer.classList.add(DRAWER_CLASSES.translateX);
      overlay.classList.add(DRAWER_CLASSES.hidden);
      document.body.style.overflow = '';

      document.dispatchEvent(
        new CustomEvent(DRAWER_EVENTS.stateChange, {
          detail: { isOpen: false },
        }),
      );
    };

    public destroy(): void {
      document.removeEventListener(DRAWER_EVENTS.toggle, this.handleToggle);
      document.removeEventListener('keydown', this.handleKeyDown);
      this.elements.closeBtn?.removeEventListener('click', this.close);
      this.elements.overlay?.removeEventListener('click', this.close);
    }
  }

  let drawerController: DrawerController;

  document.addEventListener('astro:page-load', () => {
    drawerController?.destroy();
    drawerController = new DrawerController();
  });
</script>
