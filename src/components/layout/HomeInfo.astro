---
import ButtonLink from '@components/control/ButtonLink.astro';
import { HomeSiderType } from '@constants/enum';
import { routers } from '@constants/router';
import { getSiteConfig } from '@constants/site-config-i18n';
import { getAllTags, getCategoryList, getPostCount, getSortedPosts } from '@lib/content';
import { getLanguageFromUrl, getLocalizedUrl } from '@lib/i18n';
import { getTranslations } from '@i18n/index';
import { cn } from '@lib/utils';
import { Icon } from 'astro-icon/components';
import Social from './Social.astro';

interface Props {
  type?: HomeSiderType;
  className?: string;
  isDrawer?: boolean;
  frontmatter?: any; // 添加frontmatter属性用于传递文章数据
}

// 获取当前语言和翻译
const currentLanguage = getLanguageFromUrl(Astro.url);
const translations = getTranslations(currentLanguage);
const siteConfig = getSiteConfig(currentLanguage);

const postCount = await getPostCount();
const { countMap } = await getCategoryList();
const posts = await getSortedPosts();
const tags = getAllTags(posts);

const allTags = Object.entries(tags).map(([tag, count]) => ({ tag, count }));

// 创建多语言路由器
const localizedRouters = routers.map((router) => ({
  ...router,
  name: router.translationKey
    ? translations.nav[router.translationKey as keyof typeof translations.nav] || router.name
    : router.name,
  path: router.path ? getLocalizedUrl(router.path, currentLanguage) : undefined,
  children: router.children?.map((child) => ({
    ...child,
    name: child.translationKey
      ? translations.nav[child.translationKey as keyof typeof translations.nav] || child.name
      : child.name,
    path: child.path ? getLocalizedUrl(child.path, currentLanguage) : undefined,
  })),
}));
---

<div class="flex flex-col items-center">
  <img
    transition:persist="page-home-sider-avatar"
    src={siteConfig.avatar}
    alt={`${siteConfig.name}'s avatar`}
    class="shadow-card-darker hover:animate-shake h-40 w-40 rounded-full transition"
  />

  <p class="mt-2">{siteConfig?.name}</p>
  <p class="text-muted-foreground mt-3">{siteConfig?.description}</p>
  <Social />
  <div
    class="text-muted-foreground mt-3 flex justify-center text-center text-sm/4 whitespace-nowrap select-none dark:text-white/80"
  >
    <a href={getLocalizedUrl('/', currentLanguage)} class="hover:text-blue flex cursor-pointer flex-col gap-2 p-1 transition">
      <span class="text-lg/5 font-bold">{postCount}</span>
      {translations.nav.articles}
    </a>
    <div class="bg-muted-foreground mx-3 w-px"></div>
    <a
      href={getLocalizedUrl('/categories', currentLanguage)}
      aria-label={translations.category.allCategories}
      class="hover:text-blue"
    >
      <p class="flex cursor-pointer flex-col gap-2 p-1 transition">
        <span class="text-lg/5 font-bold">{Object.keys(countMap).length}</span>
        {translations.nav.categories}
      </p>
    </a>
    <div class="bg-muted-foreground mx-3 w-px"></div>
    <a
      href={getLocalizedUrl('/tags', currentLanguage)}
      class="hover:text-blue flex cursor-pointer flex-col gap-2 p-1 transition"
    >
      <span class="text-lg/5 font-bold">{allTags?.length ?? 0}</span>
      {translations.nav.tags}
    </a>
  </div>
  <div class="mt-6 flex w-full flex-col items-center gap-2.5">
    {
      localizedRouters.map(({ name, path, icon, children }) => {
        if (children?.length) {
          return (
            <div class="bg-foreground/10 flex flex-col rounded-xl opacity-75 transition-all duration-300 hover:opacity-100">
              <div class="flex-center h-12">
                {icon && <Icon name={icon} class="mr-1.5" />}
                {name}
              </div>
              <div class="flex flex-col gap-2.5">
                {children.map(({ name, path, icon }) => (
                  <ButtonLink
                    url={path}
                    label={name}
                    variant="gradient-shoka"
                    className={cn(
                      'shoka-button-shadow h-12 w-40 rounded-xl text-base tracking-wider transition-all duration-300',
                      {
                        'text-muted-foreground/80 hover:bg-muted-foreground/10 bg-none shadow-none hover:shadow-none':
                          path !== Astro.url.pathname,
                      },
                    )}
                  >
                    {icon && <Icon name={icon} class="mr-1.5" />}
                    {name}
                  </ButtonLink>
                ))}
              </div>
            </div>
          );
        }
        return (
          <ButtonLink
            url={path}
            label={name}
            variant="gradient-shoka"
            className={cn(
              'shoka-button-shadow h-12 w-40 rounded-xl text-base tracking-wider opacity-75 transition-all duration-300 hover:opacity-100',
              {
                'text-muted-foreground/80 hover:bg-muted-foreground/10 bg-none shadow-none hover:shadow-none':
                  path !== Astro.url.pathname,
              },
            )}
          >
            {icon && <Icon name={icon} class="mr-1.5" />}
            {name}
          </ButtonLink>
        );
      })
    }
  </div>
</div>
