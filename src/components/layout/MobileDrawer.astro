---
import { Icon } from 'astro-icon/components';
import HomeSider from './HomeSider.astro';
import { HomeSiderType } from '@constants/enum';
---

<!-- 遮罩层 -->
<div id="drawer-overlay" class="fixed inset-0 z-40 hidden bg-black/50" role="presentation" aria-hidden="true"></div>

<!-- 移动端抽屉导航 -->
<div
  id="mobile-drawer"
  class="bg-gradient-start tablet:flex fixed inset-y-0 left-0 z-50 hidden h-screen w-[70vw] min-w-64 -translate-x-full transform p-4 pt-6 shadow-lg backdrop-blur-sm transition-transform duration-300"
  role="dialog"
  aria-label="导航菜单"
  aria-modal="true"
>
  <div class="flex h-full w-full flex-col overflow-auto">
    <button id="close-drawer" aria-label="关闭菜单" class="invisible">
      <Icon name="ri:close-line" class="h-6 w-6" />
    </button>
    <HomeSider className="tablet:flex mt-4 hidden w-full min-w-full p-0" isDrawer type={HomeSiderType.POST} />
  </div>
</div>

<script>
  interface DrawerElements {
    drawer: HTMLElement | null;
    closeBtn: HTMLElement | null;
    overlay: HTMLElement | null;
  }

  const DRAWER_SELECTORS = {
    drawer: 'mobile-drawer',
    closeBtn: 'close-drawer',
    overlay: 'drawer-overlay',
  } as const;

  const DRAWER_CLASSES = {
    hidden: 'hidden',
    translateX: '-translate-x-full',
  } as const;

  const DRAWER_EVENTS = {
    toggle: 'toggleDrawer',
    stateChange: 'drawerStateChange',
  } as const;

  class DrawerController {
    private elements: DrawerElements;
    private isOpen = false;

    constructor() {
      this.elements = this.initElements();
      if (this.validateElements()) {
        this.bindEvents();
      }
    }

    private initElements(): DrawerElements {
      return Object.entries(DRAWER_SELECTORS).reduce(
        (acc, [key, id]) => ({
          ...acc,
          [key]: document.getElementById(id),
        }),
        {} as DrawerElements,
      );
    }

    private validateElements(): boolean {
      return Object.entries(this.elements).every(([key, element]) => {
        const exists = !!element;
        if (!exists) {
          console.error(`抽屉元素未找到: ${key}`);
        }
        return exists;
      });
    }

    private bindEvents(): void {
      document.addEventListener(DRAWER_EVENTS.toggle, this.handleToggle);
      document.addEventListener('keydown', this.handleKeyDown);

      this.elements.closeBtn?.addEventListener('click', this.close);
      this.elements.overlay?.addEventListener('click', this.close);
    }

    private handleToggle = (e: Event): void => {
      const { isOpen } = (e as CustomEvent<{ isOpen: boolean }>).detail;
      isOpen ? this.open() : this.close();
    };

    private handleKeyDown = (e: KeyboardEvent): void => {
      if (e.key === 'Escape' && this.isOpen) {
        this.close();
      }
    };

    private open = (): void => {
      const { drawer, overlay, closeBtn } = this.elements;
      if (!drawer || !overlay) return;

      this.isOpen = true;
      drawer.classList.remove(DRAWER_CLASSES.translateX);
      overlay.classList.remove(DRAWER_CLASSES.hidden);
      document.body.style.overflow = 'hidden';
      closeBtn?.focus();
    };

    private close = (): void => {
      const { drawer, overlay } = this.elements;
      if (!drawer || !overlay) return;

      this.isOpen = false;
      drawer.classList.add(DRAWER_CLASSES.translateX);
      overlay.classList.add(DRAWER_CLASSES.hidden);
      document.body.style.overflow = '';

      document.dispatchEvent(
        new CustomEvent(DRAWER_EVENTS.stateChange, {
          detail: { isOpen: false },
        }),
      );
    };

    public destroy(): void {
      document.removeEventListener(DRAWER_EVENTS.toggle, this.handleToggle);
      document.removeEventListener('keydown', this.handleKeyDown);
      this.elements.closeBtn?.removeEventListener('click', this.close);
      this.elements.overlay?.removeEventListener('click', this.close);
    }
  }

  let drawerController: DrawerController;

  document.addEventListener('astro:page-load', () => {
    drawerController?.destroy();
    drawerController = new DrawerController();
  });
</script>
