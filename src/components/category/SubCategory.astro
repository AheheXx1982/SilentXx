---
import CategoryTitle from './CategoryTitle.astro';
import { getCategoryLink } from '@lib/content';
import { getTranslatedCategoryName } from '@lib/category-i18n';

const { category, parentName, countMap, currentLanguage = 'zh-CN' } = Astro.props;

// 获取语言前缀
const langPrefix = currentLanguage === 'zh-CN' ? '' : `/${currentLanguage.toLowerCase()}`;

// 直接使用传入的原始分类名称生成链接
const categoryLink = await getCategoryLink([parentName, category.name]);
const grandChildLinks = await Promise.all(
  (category.children || []).map(async (grandChild) => ({
    grandChild,
    link: await getCategoryLink([parentName, category.name, grandChild.name]),
  })),
);

// 获取翻译后的分类名称
const translatedCategoryName = getTranslatedCategoryName(category.name, currentLanguage);
---

<CategoryTitle
  title={translatedCategoryName}
  count={countMap[category.name] ?? 0}
  href={`${langPrefix}/categories/${categoryLink}`}
  level="h3"
/>
{
  grandChildLinks.length > 0 && (
    <div class="category-second-level-container flex flex-col">
      {grandChildLinks.map((item) => {
        const grandChild = item.grandChild;
        const link = item.link;
        // 获取翻译后的孙分类名称
        const translatedGrandChildName = getTranslatedCategoryName(grandChild.name, currentLanguage);
        return (
          <p class="shoka-decoration-circle text-primary hover:text-blue relative px-7.5 py-2 text-base/9">
            <a href={`${langPrefix}/categories/${link}`} class="dashed-border border-b">
              {translatedGrandChildName}
            </a>
            <span class="text-muted-foreground text-sm">({countMap[grandChild.name] ?? 0})</span>
          </p>
        );
      })}
    </div>
  )
}
