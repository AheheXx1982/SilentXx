---
// 导入所需的库和类型
import { Badge } from '@components/ui/badge.tsx';
import { Button } from '@components/ui/button.tsx';
import { Routes } from '@constants/router';
import { defaultCoverList } from '@constants/site-config';
import { getCategoryArr, getCategoryLink } from '@lib/content';
import { parseDate } from '@lib/datetime';
import { routeBuilder } from '@lib/route';
import { cn } from '@lib/utils';
import { getLanguageFromUrl, getLocalizedUrl } from '@lib/i18n';
import { getPostTranslation } from '@lib/article-i18n';
import { getTranslatedCategoryName } from '@lib/category-i18n';
import { getTranslations } from '@i18n/index';
import { Icon } from 'astro-icon/components';
import readingTime from 'reading-time';
import type { BlogPost } from 'types/blog';

export interface PostItemCardProps {
  data: BlogPost;
  leftClip?: boolean;
  randomCover: string;
}

const { randomCover, data, leftClip = true } = Astro.props as PostItemCardProps;

// 获取当前语言
const currentLanguage = getLanguageFromUrl(Astro.url) || 'zh-CN';

// 获取翻译后的文章信息
const translation = getPostTranslation(data, currentLanguage);
const translations = getTranslations(currentLanguage);

const { cover, date, catalog, categories, description } = data?.data ?? {};
const { body } = data ?? {};

const readState = readingTime(body ?? '');
const finalCover = cover ?? randomCover ?? defaultCoverList[0];
const href = routeBuilder(Routes.Post, data as BlogPost, Astro.url);

const categoryArr = getCategoryArr(categories?.[0]);
const categoryBaseLink = await getCategoryLink(categoryArr);
const categoryLink = getLocalizedUrl(`${Routes.Categories}/${categoryBaseLink}`, currentLanguage);
const categoryName = categoryArr?.length ? categoryArr[categoryArr.length - 1] : '';
const categoryStr = categoryName ? getTranslatedCategoryName(categoryName, currentLanguage) : '';
---

<div
  class="hover:shadow-card-darker group text-card-foreground shadow-card relative flex gap-2 rounded-lg transition-shadow md:flex-col"
>
  <a
    aria-label="post-link"
    href={href}
    class={cn(
      'relative h-[11.625rem] max-h-[11.625rem] w-[calc(50%-2rem)] overflow-hidden rounded-lg md:w-auto md:clip-path-none',
      leftClip ? ' order-1 clip-path-post-img-left' : 'order-2 clip-path-post-img-right',
      'md:order-none md:clip-path-none',
    )}
  >
    <img
      src={finalCover}
      loading="lazy"
      alt="post"
      class="h-full w-full cursor-pointer object-cover transition duration-500 group-hover:scale-110 group-hover:rotate-3"
    />
  </a>
  <div
    class={cn(
      'flex w-[calc(50%+2rem)] flex-col gap-2 px-4 pb-2 md:pb-4 pt-4 md:w-full md:pt-1',
      leftClip ? 'order-2' : 'order-1',
      'md:order-none',
    )}
  >
    <div class="flex w-full justify-between">
      {
        catalog === false ? null : (
          <a href={categoryLink} class="flex-center hover:text-blue text-muted-foreground text-xs transition duration-300">
            <Icon name="gg:flag" />
            {categoryStr}
          </a>
        )
      }
      <div class="text-muted-foreground flex justify-end gap-4 text-xs">
        {
          date ? (
            <p class="flex-center gap-1">
              <Icon name="fa6-solid:calendar-days" />
              {parseDate(date, 'YYYY-MM-DD')}
            </p>
          ) : null
        }
        <p class="flex-center gap-1">
          <Icon name="fa6-solid:pen-nib" />
          {
            currentLanguage === 'zh-CN'
              ? `${readState?.words} 字`
              : `${readState?.words} ${translations.post.wordCount?.replace('字数', '') || 'words'}`
          }
        </p>
        <p class="flex-center gap-1 md:hidden" title={`预计阅读时长: ${readState?.minutes} min`} data-tooltip-placement="top">
          <Icon name="fa6-solid:clock" />
          {readState?.text}
        </p>
      </div>
    </div>
    <div class="mt-1 flex flex-col space-y-1.5 p-0">
      <a href={href} aria-label="post-link"
        ><h3
          class="text-primary hover:text-blue truncate text-xl leading-none font-bold tracking-tight transition-colors duration-300"
        >
          {translation.title}
        </h3>
      </a>
    </div>
    <p class="text-muted-foreground line-clamp-3 h-15 text-sm md:h-auto md:max-h-15">
      {translation.description ?? description ?? body?.slice(0, 150)}
    </p>
    <div class={cn('mt-2 flex @container gap-2 ', { 'justify-end': !leftClip }, 'md:justify-start')}>
      {
        data?.data.tags?.length
          ? data?.data.tags.map((tag: string, index: number) => {
              return (
                <Badge
                  className={cn('hidden cursor-pointer gap-0.5 text-xs whitespace-nowrap @md:flex', {
                    '@xs:flex': index < 2,
                    '@sm:flex': index < 3,
                  })}
                >
                  <Icon name="fa6-solid:tags" /> {tag}
                </Badge>
              );
            })
          : null
      }
    </div>
    <a
      href={href}
      aria-label="more info"
      class={cn('absolute bottom-0', leftClip ? 'right-0' : 'left-0', 'md:left-auto md:right-0')}
    >
      <Button
        className={cn(
          'bg-gradient-shoka-button rounded-2xl transition-all hover:translate-y-1 hover:scale-105 md:h-7 md:px-2 md:py-1 md:text-xs',
          leftClip
            ? 'rounded-se-none rounded-es-none hover:translate-x-1'
            : 'rounded-ss-none rounded-ee-none hover:-translate-x-1',
          'md:rounded-ss-2xl md:rounded-se-none md:rounded-ee-2xl md:rounded-es-none md:hover:translate-x-1',
        )}
      >
        more...
      </Button>
    </a>
  </div>
</div>
