---
import type { ContentConfig } from '@constants/content-config';
import { defaultContentConfig } from '@constants/content-config';

interface Props {
  Content: any;
  config?: Partial<ContentConfig>;
}

const { Content, config = {} } = Astro.props;
const finalConfig = Object.assign(defaultContentConfig, config);
---

<div class="custom-content" data-config={JSON.stringify(finalConfig)}>
  {
    typeof Content === 'function'
      ? (() => {
          const contentResult = Content();
          // 如果返回的是HTML字符串，使用set:html渲染
          if (typeof contentResult === 'string') {
            return <div set:html={contentResult} />;
          }
          // 否则直接渲染组件（使用正确的Astro组件调用方式）
          return contentResult;
        })()
      : null
  }
</div>

<script>
  import type { ContentConfig } from '@constants/content-config';

  // Custom content enhancement script
  function enhanceContent() {
    const contentContainer = document.querySelector('.custom-content');
    if (!contentContainer) return;

    // Get configuration from data attribute
    const configData = contentContainer.getAttribute('data-config');
    const config: ContentConfig = configData
      ? JSON.parse(configData)
      : {
          addBlankTarget: true,
          smoothScroll: true,
        };

    // Add target="_blank" to external links
    if (config.addBlankTarget) {
      const links = contentContainer.querySelectorAll('a[href]');
      links.forEach((link: Element) => {
        const anchor = link as HTMLAnchorElement;
        const href = anchor.getAttribute('href') || '';

        // Check if it's an external link (starts with http/https or is absolute)
        if (href.startsWith('http') || href.startsWith('//')) {
          anchor.setAttribute('target', '_blank');
          anchor.setAttribute('rel', 'noopener noreferrer');
        }
      });
    }

    // Add smooth scroll to anchor links
    if (config.smoothScroll) {
      const anchorLinks = contentContainer.querySelectorAll('a.anchor-link[href^="#"]');
      anchorLinks.forEach((link: Element) => {
        const anchor = link as HTMLAnchorElement;

        anchor.addEventListener('click', (e) => {
          e.preventDefault();

          const targetId = anchor.getAttribute('href')?.substring(1);
          if (!targetId) return;

          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: 'smooth',
              block: 'start',
            });

            // Update URL hash without jumping
            history.pushState(null, '', `#${targetId}`);
          }
        });
      });
    }
  }

  // Run on page load
  document.addEventListener('astro:page-load', enhanceContent);

  // Run immediately if already loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', enhanceContent);
  } else {
    enhanceContent();
  }
</script>
