---
import { siteConfig } from '@constants/site-config';
import { parseDate } from '@lib/datetime';
import { Icon } from 'astro-icon/components';
import readingTime from 'reading-time';
import type { BlogPost } from 'types/blog';
import WaveSvg from './cover/wave';

export interface CoverProps {
  data?: BlogPost;
}

const { data } = Astro.props as CoverProps;

const { date, title } = data?.data ?? {};

const readState = readingTime(data?.body ?? '');
---

<div class="relative flex h-[60vh] max-h-[35rem] overflow-hidden">
  <div class="absolute inset-0 h-full bg-black/40"></div>
  <div class="absolute inset-0 bottom-[8vh] flex flex-col items-center justify-center px-5 text-white">
    {
      data ? (
        <>
          <h1 class="shadow-text font-noto text-4.5xl font-bold">{title}</h1>
          <p class="mt-3 flex items-center justify-center gap-4">
            <span class="flex items-center gap-1">
              <Icon name="fa6-solid:calendar-days" />
              发表于 {parseDate(date ?? '', 'YYYY-MM-DD')}
            </span>
            <span class="flex items-center gap-1">
              <Icon name="fa6-solid:pen-nib" /> {readState?.words} 字
            </span>
            <span class="flex items-center gap-1">
              <Icon name="fa6-solid:clock" />
              {readState?.text}
            </span>
          </p>
        </>
      ) : (
        <>
          <h2 class="shadow-text font-fg text-5.5xl/[1.2]">{siteConfig?.alternate}</h2>
          <h1 class="shadow-text mt-3 font-noto text-4.5xl/[1.2] font-bold tracking-widest">{siteConfig?.title}</h1>
          <p class="shadow-text mt-5 text-sm">= {siteConfig?.subtitle} =</p>
        </>
      )
    }
  </div>
  <div class="relative -z-10 h-full min-h-[15rem] w-full" transition:persist="page-cover-banner" id="banner-box"></div>
  <WaveSvg transition:persist="page-cover-wave" />
</div>
<!-- thanks https://www.color4bg.com/zh-hans/ -->
<script src="/js/GridArrayBg.min.js" is:inline></script>

<script is:inline>
  let lightColors = ['#ed719a', '#FFACDE', '#FBD7ED', '#EEF1F0', '#DDDDDD', '#B4B4B4'];
  let darkColors = ['#212832', '#3F4659', '#8592A7', '#EEEFEA', '#212832', '#3F4659'];

  function changeColor(mode) {
    colorbg = new Color4Bg.GridArrayBg({
      dom: 'banner-box',
      colors: mode === 'light' ? lightColors : darkColors,
      loop: true,
    });
  }
  // 监听html的class属性变化若包含dark或者不包含则重新new
  new MutationObserver((mutationsList, observer) => {
    for (const mutation of mutationsList) {
      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
        console.log('change', document.documentElement.classList);
        if (document.documentElement.classList.contains('dark')) {
          changeColor('dark');
        } else {
          changeColor('light');
        }
      }
    }
  }).observe(document.documentElement, { attributes: true });

  function debounce(fn, delay) {
    let timer = null;
    return function () {
      clearTimeout(timer);
      timer = setTimeout(fn, delay);
    };
  }
  // 监听resize 加个防抖
  window.addEventListener(
    'resize',
    debounce(() => {
      changeColor(document.documentElement.classList.contains('dark') ? 'dark' : 'light');
    }, 1000),
  );
</script>
